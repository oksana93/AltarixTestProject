
DROP TABLE employees;
-- DROP TABLE relations_dep;
DROP TABLE departments;
DROP TABLE jobs;
DROP TABLE users;
DROP SEQUENCE hibernate_sequence;

CREATE SEQUENCE hibernate_sequence
increment by 1
start with 1;

CREATE TABLE jobs (
  id INT4 PRIMARY KEY,
  definition VARCHAR(200) NOT NULL
);

CREATE TABLE departments(
  id INT4 PRIMARY KEY,
  name VARCHAR(60) NOT NULL,
  date DATE NOT NULL,
  master_id INT4,
  CONSTRAINT dep_dep foreign key (master_id) references departments
);

-- CREATE TABLE relations_dep (
--   r_id INT4 PRIMARY KEY,
--   master_id INT4 not NULL,
--   branch_id INT4 NOT NULL,
--   CONSTRAINT rel_master foreign key (master_id) references departments(id),
--   CONSTRAINT rel_branch foreign key (branch_id) references departments(id)
-- );

CREATE TABLE employees(
  id INT4 PRIMARY KEY,
  firstname VARCHAR(60) NOT NULL,
  lastname VARCHAR(60) NOT NULL,
  patronymic VARCHAR(60) NOT NULL,
  gender VARCHAR(6) NOT NULL,
  birthdate DATE NOT NULL,
  d_id INT4 NOT NULL,
  hiredate DATE NOT NULL,
  dismissal DATE,
  j_id INT4 NOT NULL,
  salary INT4 NOT NULL,
  chief BOOLEAN NOT NULL,
  CONSTRAINT emp_dep foreign key (d_id) references departments,
  CONSTRAINT emp_job foreign key (j_id) references jobs
);

CREATE TABLE users (
  id INT4 PRIMARY KEY,
  username VARCHAR(20) NOT NULL,
  password VARCHAR(20) NOT NULL
);

/** --------------------------------R1------------------------------ */
create table timer_department_salary(
  id INT4 PRIMARY KEY,
  date TIMESTAMP NOT NULL DEFAULT current_timestamp,
  d_id INT4 NOT NULL,
  salary INT4,
  CONSTRAINT timer_dep FOREIGN KEY (d_id) REFERENCES departments ON DELETE CASCADE
);
/** --------------------------------R2------------------------------ */

-- R11
    -- drop table emp_change;

    CREATE TABLE departments_change(
      change_name VARCHAR(15),
      change_data DATE
    );

    DROP FUNCTION trigger_start();

    CREATE OR REPLACE FUNCTION trigger_start() RETURNS TRIGGER AS $$
    BEGIN
      IF TG_OP = 'INSERT'
      THEN
        INSERT INTO departments_change VALUES ('INSERT', current_timestamp);
      END IF;
      IF TG_OP = 'DELETE'
      THEN
        INSERT INTO departments_change VALUES ('DELETE', current_timestamp);
      END IF;
      IF TG_OP = 'UPDATE'
      THEN
        INSERT INTO departments_change VALUES ('UPDATE', current_timestamp);
      END IF;
      RETURN OLD;
    END
    $$
    LANGUAGE plpgsql;

    CREATE TRIGGER trigger_department
AFTER DELETE OR UPDATE OR INSERT ON departments
FOR EACH ROW
EXECUTE PROCEDURE trigger_start();