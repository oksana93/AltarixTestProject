Шаблон запросов (смешение @Query и posgreSQL)

-- D1 - Создание департамента
    select * from departments;

-- D2 - Изменение наименования департамента.
-- В системе не может быть двух департаментов с одинаковыми наименованиями
    UPDATE Department
    SET name=:name
    WHERE id=:id;

-- D3 - Удаление департамента. Удаление возможно, только если в нем нет ни одного сотрудника.
--1 если существует - удалять нельзя
    SELECT DISTINCT d
    FROM Department d
      RIGHT OUTER JOIN Employee e ON d.id = e.d_id
    WHERE d.id = :id;
-- если не существует сотрудников в департаменте (начало), выполняем следуюшие "махинации"

--2 находим branches (наследников) - используется в idList
SELECT departments
FROM Department departments
WHERE departments.master_id=:id;

            -- второстепенный запрос - выводит branch и master в строке искомого удаляемого департамента
            -- d1 - branch, d2 - required
            select d1.id, d2.master_id
            from departments d1
            inner JOIN departments d2 ON d1.master_id=d2.id
            WHERE d2.id = :id;

--3 перемещаем branches на master
    UPDATE departments
    SET master_id =
    (SELECT distinct d1.master_id
     FROM departments d
       INNER JOIN departments d1 ON d.master_id = d1.id
     WHERE d1.id = :id)
    WHERE id in (:idList);

-- D4 - Просмотр сведений о департаменте. Должна быть выдана информация о наименовании департамента,
-- дате создания, руководителе департамента и количестве сотрудников департамента.
-- Сам департамент
    SELECT departments
    from Departments departments
    where departments.id=:id;
-- Начальник
    SELECT employees
    from Employees employees
    where employees.d_id = :id
    and employees.chief = true;
-- Количество сотрудников
    SELECT count(e)
    FROM employees e
      INNER JOIN departments d ON e.d_id=d.id
    WHERE d.id=:id;

-- D5 -
    SELECT departments
    FROM Department departments
    WHERE departments.master_id=:id;

-- D6 Предоставление информации о департаментах, находящихся в непосредственном подчинении данного департамента
-- (на уровень ниже).
    -- через hibernate

-- D7 - Перенос департамента. Задание другого департамента, куда будет входить данный департамент.
    UPDATE departments
    SET departments.master_id = :master_id
    WHERE departments.id = :id;

-- D8 - Получение информации о всех вышестоящих департаментах данного департамента.
    -- через hibernate

-- D9 - Поиск департамента по наименованию.
    SELECT d
    FROM Department d
    WHERE d.name = :name;

-- D10 - Получение информации о фонде заработной платы департамента (сумма зарплат всех сотрудников департамента).
    SELECT SUM(e.salary)
    FROM Employee e
    INNER JOIN departments d ON e.d_id = d.id
    WHERE d.id=:id;

-- E1 - Получение списка сотрудников департамента.
    SELECT e from Employee e;

-- E2 - Создание сотрудника департамента.
    -- save(..)

-- E3 - Редактирование сведений о сотруднике департамента.
    UPDATE employees
    set ....
    WHERE employees.id = :id;

-- E4 - Увольнение сотрудника с указанием даты увольнения.
    UPDATE employees
    set dismissal = :dismissal
    WHERE employees.id = :id;

-- E5 - Получение информации о сотруднике.
    SELECT e
    FROM Employee e
    WHERE e.id = :id;

-- E6 - Перевод сотрудника из одного департамента в другой.
    UPDATE employees
    SET employees.d_id = :d_id
    WHERE employees.id = :id;

-- E7 - Перевод всех сотрудников департамента в другой департамент.
    UPDATE employees
    SET d_id = :new_d_id
    WHERE employees.id IN
          (SELECT e.id
           FROM employees e
             INNER JOIN departments d ON e.d_id = d.id
          WHERE d.id = :old_d_id);

-- E8 - Получение информации о руководителе данного сотрудника.
    SELECT e1
    FROM employees e1
    INNER JOIN departments d1 ON e1.d_id = d1.id
    WHERE d1.id =
          (SELECT d2.id
          FROM departments d2
          INNER JOIN employees e2 ON d2.id = e2.d_id
          and e2.id = :id)
    AND e1.chief = true;

-- E9 - Поиск сотрудников по атрибутам (по каким – решить самостоятельно).
    SELECT e
    FROM employees e
    WHERE e.chief = true;

-- R10

-- R11
    -- drop table emp_change;

    CREATE TABLE departments_change(
      change_name VARCHAR(15),
      change_data DATE
    );

    DROP FUNCTION trigger_start();

    CREATE OR REPLACE FUNCTION trigger_start() RETURNS TRIGGER AS $$
    BEGIN
      IF TG_OP = 'INSERT'
      THEN
        INSERT INTO departments_change VALUES ('INSERT', current_timestamp);
      END IF;
      IF TG_OP = 'DELETE'
      THEN
        INSERT INTO departments_change VALUES ('DELETE', current_timestamp);
      END IF;
      IF TG_OP = 'UPDATE'
      THEN
        INSERT INTO departments_change VALUES ('UPDATE', current_timestamp);
      END IF;
      RETURN OLD;
    END
    $$
    LANGUAGE plpgsql;

    CREATE TRIGGER trigger_department
AFTER DELETE OR UPDATE OR INSERT ON departments
FOR EACH ROW
EXECUTE PROCEDURE trigger_start();
